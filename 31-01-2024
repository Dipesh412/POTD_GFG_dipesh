class Solution
{
    public:
        bool containsKey(char a,struct TrieNode *root){
            return root->children[a-'a']!=NULL;
        }
        void put(char a,struct TrieNode *Node,struct TrieNode *root){
            root->children[a-'a'] = Node;
        }
        TrieNode *get(char a,struct TrieNode *Node){
            return Node->children[a-'a'];
        }
        void setEnd(struct TrieNode *Node){
            Node->isLeaf = true;
        }
        void insert(struct TrieNode *root, string key)
        {
            for(int i = 0;i < key.length();i++){
                if(!containsKey(key[i],root)){
                    put(key[i],new TrieNode(),root);
                }
                root = get(key[i],root);
            }
            setEnd(root);
        }
        
        //Function to use TRIE data structure and search the given string.
        bool search(struct TrieNode *root, string key) 
        {
            for(int i = 0;i < key.length();i++){
                if(!containsKey(key[i],root))return false;
                root = get(key[i],root);
            }
            return root->isLeaf;
        }
};
